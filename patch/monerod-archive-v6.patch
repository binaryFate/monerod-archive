From d6b2356c2dc0a6abafb187e3fe51cee80c9cdaa7 Mon Sep 17 00:00:00 2001
From: neptuneresearch <neptuneresearch@protonmail.com>
Date: Wed, 15 Aug 2018 00:06:00 +0000
Subject: [PATCH] monerod-archive-v6

---
 src/cryptonote_core/blockchain.cpp | 149 +++++++++++++++++++++++++++++
 src/cryptonote_core/blockchain.h   |  24 +++++
 2 files changed, 173 insertions(+)

diff --git a/src/cryptonote_core/blockchain.cpp b/src/cryptonote_core/blockchain.cpp
index dad30906..0a1eabd3 100644
--- a/src/cryptonote_core/blockchain.cpp
+++ b/src/cryptonote_core/blockchain.cpp
@@ -27,6 +27,9 @@
 // THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //
 // Parts of this file are originally copyright (c) 2012-2013 The Cryptonote developers
+// 
+// ** Patched with MonerodArchive v6 by Neptune Research
+// ** SPDX-License-Identifier: BSD-3-Clause
 
 #include <algorithm>
 #include <cstdio>
@@ -3718,6 +3721,9 @@ bool Blockchain::update_next_cumulative_size_limit()
   return true;
 }
 //------------------------------------------------------------------
+/*
+  MonerodArchive: Monero 0.12.3.0 Blockchain::add_new_block patch
+*/
 bool Blockchain::add_new_block(const block& bl_, block_verification_context& bvc)
 {
   LOG_PRINT_L3("Blockchain::" << __func__);
@@ -3736,9 +3742,17 @@ bool Blockchain::add_new_block(const block& bl_, block_verification_context& bvc
     return false;
   }
 
+  // <MonerodArchive (All Blocks)>
+  block& bl_archive = const_cast<block&>(bl_);
+  // <MonerodArchive (All Blocks)>
+
   //check that block refers to chain tail
   if(!(bl.prev_id == get_tail_id()))
   {
+    // <MonerodArchive (Alt Block)>
+    archive_block(bl_archive, true);
+    // </MonerodArchive (Alt Block)>
+
     //chain switching or wrong block
     bvc.m_added_to_main_chain = false;
     m_db->block_txn_stop();
@@ -3747,11 +3761,146 @@ bool Blockchain::add_new_block(const block& bl_, block_verification_context& bvc
     return r;
     //never relay alternative blocks
   }
+  // <MonerodArchive (Main Block)>
+  else
+  {
+    archive_block(bl_archive, false);
+  }
+  // </MonerodArchive (Main Block)>
 
   m_db->block_txn_stop();
   return handle_block_to_main_chain(bl, id, bvc);
 }
 //------------------------------------------------------------------
+/*
+  <MonerodArchive>
+*/
+void Blockchain::archive_block(block& b, bool is_alt_block) 
+{
+  // ## read config
+  std::string filename_archive = archive_output_filename();
+  std::string output_field_delimiter = "\t";
+
+  // ## get altchaininfo
+  std::pair<uint64_t,std::string> altchaininfo = archive_alt_chain_info();
+  uint64_t altchaininfo_length = altchaininfo.first;
+  std::string altchaininfo_json = altchaininfo.second;
+  
+  // ## get data from block
+  // block height: miner_tx => txin_v transaction.vin => txin_v[0] => txin_v.txin_gen => txin_gen.height
+  size_t block_height = boost::get<txin_gen>(b.miner_tx.vin[0]).height;
+  // block timestamp (MRT)
+  uint64_t block_timestamp = b.timestamp;
+  // node_timestamp (NRT)
+  uint64_t node_timestamp = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
+
+  // ## OUTPUT - Daemon console
+  std::stringstream patch_log;
+  patch_log << "Block Archive "
+    << (is_alt_block ? "ALT " : "MAIN") 
+    << " H=" << block_height 
+    << " MRT=" << block_timestamp 
+    << " NRT=" << node_timestamp
+    << " n_alt_chains=" << altchaininfo_length;
+  MCLOG_MAGENTA(el::Level::Info, "global", patch_log.str());
+
+  // ## OUTPUT - Filesystem recording
+  // ### serialize block
+  std::ostringstream block_json_buf;
+  // note: second argument to json_archive() is bool indent
+  json_archive<true> block_json(block_json_buf, false);
+  bool block_json_success = ::serialization::serialize(block_json, b);
+
+  // ### make archive line
+  std::stringstream archive_line;
+  // note: string << int required for int to string conversion
+  archive_line << "" << node_timestamp 
+    << output_field_delimiter
+    << (is_alt_block ? "1" : "0")
+    << output_field_delimiter;
+  archive_line << (block_json_success ? block_json_buf.str() : "{}");
+  archive_line << output_field_delimiter
+    << altchaininfo_length
+    << output_field_delimiter
+    << altchaininfo_json
+    << "\n";
+  bool save_success = epee::file_io_utils::append_string_to_file(filename_archive, archive_line.str());
+}
+//-----------------------------------------------------------------------------------------------
+std::pair<uint64_t,std::string> Blockchain::archive_alt_chain_info() 
+{
+  // rpc_get_info: read height_without_bootstrap
+  uint64_t height_without_bootstrap;
+  get_tail_id(height_without_bootstrap);
+  ++height_without_bootstrap; // turn top block height into blockchain height
+
+  // rpc_get_alternate_chains
+  std::list<std::pair<Blockchain::block_extended_info, std::vector<crypto::hash>>> chains = get_alternative_chains();
+  uint64_t altchains_length = boost::lexical_cast<uint64_t>(chains.size());
+
+  // serialize altchains
+  std::stringstream altchains_json;
+  if(altchains_length > 0)
+  {
+    //  root array start
+    altchains_json << "[";
+
+    //  each altchain
+    bool firstchain = false;
+    for (const auto &chain: chains)
+    {
+      uint64_t length = chain.second.size();
+      uint64_t start_height = (chain.first.height - length + 1);
+      uint64_t deep = (height_without_bootstrap - start_height - 1);
+      std::string block_hash = epee::string_tools::pod_to_hex(get_block_hash(chain.first.bl));
+
+      // n > 1 : add array delimiter
+      if(!firstchain)
+      {
+        firstchain = true;
+      }
+      else
+      {
+        altchains_json << ",";
+      }
+      // serialize chain
+      altchains_json << "{"
+                          << "\"length\"" << ":" << length << ","
+                          << "\"height\"" << ":" << start_height << ","
+                          << "\"deep\""   << ":" << deep << ","
+                          << "\"diff\""   << ":" << chain.first.cumulative_difficulty << ","
+                          << "\"hash\""   << ":" << "\"" << block_hash << "\""
+                      << "}";
+    }
+
+    //  root array end
+    altchains_json << "]";
+  }
+  else
+  {
+    // root array empty
+    altchains_json << "[]";
+  }
+
+  return std::make_pair(altchains_length, altchains_json.str());
+}
+//-----------------------------------------------------------------------------------------------
+std::string Blockchain::archive_output_filename() 
+{
+  // ## USER INPUT
+  // # output_filename
+  // # - Directory MUST exist, it will not be created.
+  std::string output_filename;
+
+  // # Linux flavor
+  output_filename = "/opt/monerodarchive/archive.log";
+
+  return output_filename;
+}
+/*
+  </MonerodArchive>
+*/
+//------------------------------------------------------------------
 //TODO: Refactor, consider returning a failure height and letting
 //      caller decide course of action.
 void Blockchain::check_against_checkpoints(const checkpoints& points, bool enforce)
diff --git a/src/cryptonote_core/blockchain.h b/src/cryptonote_core/blockchain.h
index d95c8ed1..f7b16c8c 100644
--- a/src/cryptonote_core/blockchain.h
+++ b/src/cryptonote_core/blockchain.h
@@ -27,6 +27,9 @@
 // THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //
 // Parts of this file are originally copyright (c) 2012-2013 The Cryptonote developers
+// 
+// ** Patched with MonerodArchive v6 by Neptune Research
+// ** SPDX-License-Identifier: BSD-3-Clause
 
 #pragma once
 #include <boost/asio/io_service.hpp>
@@ -302,6 +305,27 @@ namespace cryptonote
      */
     bool add_new_block(const block& bl_, block_verification_context& bvc);
 
+    /*
+     * <MonerodArchive>
+     */
+    /**
+     * @copydoc Blockchain::archive_block
+     */
+    void archive_block(block& b, bool is_alt_block);
+
+    /**
+     * @copydoc Blockchain::archive_alt_chain_info
+     */
+    std::pair<uint64_t,std::string> archive_alt_chain_info();
+
+    /**
+     * @copydoc Blockchain::archive_output_filename
+     */
+    std::string archive_output_filename();
+    /*
+     * </MonerodArchive>
+    */
+
     /**
      * @brief clears the blockchain and starts a new one
      *
-- 
2.18.0

